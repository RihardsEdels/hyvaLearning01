<?php
/**
 * This file is part of the ExampleHyvaTheme package.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade ExampleHyvaTheme
 * to newer versions in the future.
 *
 * @copyright Copyright (c) 2022 Magebit, Ltd. (https://magebit.com/)
 * @author    Magebit <info@magebit.com>
 * @license   MIT
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

declare(strict_types=1);

use Hyva\Theme\Model\ViewModelRegistry;
use Magento\Framework\Escaper;
use Magento\Framework\View\Element\Template;
use Hyva\Theme\ViewModel\HeroiconsOutline;

/** @var Template $block */
/** @var Escaper $escaper */
/** @var ViewModelRegistry $viewModels */

/** @var HeroiconsOutline $heroicons */
$heroicons = $viewModels->require(HeroiconsOutline::class);


// The item to render is set on the block before the template is rendered:
$column = $block->getData('item');

$buttonLabel = $column->getButton();
$buttonUrl = $column->getButtonUrl();
?>
<script>
    function initSliderComponent() {
        return {
            active: 0,
            itemCount: 0,
            getSlider() {
                return this.$el.querySelector('.js_slides');
            },
            pageSize: 1,
            pageFillers: 0,
            calcPageSize() {
                const slider = this.getSlider();
                if (slider) {
                    this.itemCount = slider.querySelectorAll('.js_slide').length;
                    this.pageSize = Math.round(slider.clientWidth / slider.querySelector('.js_slide').clientWidth);
                    this.pageFillers = (
                        this.pageSize * Math.ceil(this.itemCount / this.pageSize)
                    ) - this.itemCount;
                }
            },
            calcActive() {
                const slider = this.getSlider();
                if (slider) {
                    const sliderItems = this.itemCount + this.pageFillers;
                    const calculatedActiveSlide = slider.scrollLeft / (slider.scrollWidth / sliderItems);
                    this.active = Math.round(calculatedActiveSlide / this.pageSize) * this.pageSize;
                }
            },
            scrollPrevious() {
                this.scrollTo(this.active - this.pageSize);
            },
            scrollNext() {
                this.scrollTo(this.active + this.pageSize);
            },
            scrollTo(idx) {
                const slider = this.getSlider();
                if (slider) {
                    const slideWidth = slider.scrollWidth / (this.itemCount + this.pageFillers);
                    slider.scrollLeft = Math.floor(slideWidth) * idx;
                    this.active = idx;
                }
            }
        }
    }
</script>
<div class="grid grid-cols-2 gap-x-[118px] min-h-[470px] pb-[60px]">
    <div>
        <p class="mt-2 block text-xxl font-medium text-white truncate font-medium pointer-events-none">
            <?= $escaper->escapeHtml($column->getTitle())?>
        </p>
        <p class="my-10 block text-sm font-medium text-white pointer-events-none">
            <?= /** @noeEscape */$column->getDescription(); ?>
        </p>
        <template x-if="itemCount > pageSize">
            <div class="outline-none">
                <button aria-label="<?= $escaper->escapeHtml(__('Previous'))?>" tabindex="-1"
                    class="text-white px-10 py-5 bg-blue-lightest outline-none focus:outline-none"
                    :class="{ 'opacity-25 pointer-events-none' : active === 0 }" @click="scrollPrevious">
                    <?= $heroicons->chevronLeftHtml("w-3 h-3", 15, 15) ?>
                </button>
                <button aria-label="<?= $escaper->escapeHtml(__('Next'))?>" tabindex="-1"
                    class="text-white px-10 py-5 bg-blue-lightest outline-none focus:outline-none"
                    :class="{ 'opacity-25 pointer-events-none' : active >= itemCount-pageSize }" @click="scrollNext">
                    <?= $heroicons->chevronRightHtml("w-3 h-3", 15, 15) ?>
                </button>
            </div>
        </template>
    </div>
    <a href="<?= $escaper->escapeUrl($column->getButtonUrl())?>" class="block w-full overflow-hidden pt-5 relative outline-none">
        <img src="<?= $escaper->escapeUrl($column->getThumbnail()); ?>"
            alt="<?= $escaper->escapeHtmlAttr($column->getTitle())?>" loading="lazy"
            class="object-fit shadow-image w-[90%] hover:opacity-75  min-h-14">
        <?php if ($buttonLabel && $buttonUrl): ?>
            <div class="mt-4 sm:flex">
                <div class="inline-flex btn btn-primary bg-white text-red absolute top-0 left-[52px] z-2">
                    <?= $escaper->escapeHtml($buttonLabel)?>
                </div>
            </div>
        <?php endif; ?>
    </a>
</div>